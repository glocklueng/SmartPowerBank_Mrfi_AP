<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\CC1101-End Device\end_device.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\CC1101-End Device\end_device.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Aug 10 14:58:47 2016
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI1_IRQHandler &rArr; MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[30]">CEC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from mrfi.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2f]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md_vl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[31]">TIM6_DAC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[32]">TIM7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2d]">USART3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md_vl.o(.text)
 <LI><a href="#[33]">main</a> from main_manyeds_autoack.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[37]">mrfi_TxCCADone</a> from mrfi.o(i.mrfi_TxCCADone) referenced from mrfi.o(i.MRFI_Transmit)
 <LI><a href="#[36]">mrfi_TxImmediateDone</a> from mrfi.o(i.mrfi_TxImmediateDone) referenced from mrfi.o(i.MRFI_Transmit)
 <LI><a href="#[3d]">nwk_processFreq</a> from nwk_freq.o(i.nwk_processFreq) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[3b]">nwk_processJoin</a> from nwk_join.o(i.nwk_processJoin) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[3a]">nwk_processLink</a> from nwk_link.o(i.nwk_processLink) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[3e]">nwk_processMgmt</a> from nwk_mgmt.o(i.nwk_processMgmt) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[39]">nwk_processPing</a> from nwk_ping.o(i.nwk_processPing) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[3c]">nwk_processSecurity</a> from nwk_security.o(i.nwk_processSecurity) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[38]">sCB</a> from main_manyeds_autoack.o(i.sCB) referenced from main_manyeds_autoack.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>BSP_Delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.BSP_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecLong
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[45]"></a>BSP_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_Init &rArr; BSP_InitBoard &rArr; BSP_InitUSART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>BSP_InitBoard</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.BSP_InitBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_InitBoard &rArr; BSP_InitUSART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[4e]"></a>BSP_InitButtons</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bsp.o(i.BSP_InitButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_InitButtons &rArr; gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>

<P><STRONG><a name="[48]"></a>BSP_InitDrivers</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bsp.o(i.BSP_InitDrivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_InitDrivers &rArr; BSP_InitLeds &rArr; gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitLeds
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[50]"></a>BSP_InitLeds</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, bsp.o(i.BSP_InitLeds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_InitLeds &rArr; gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>

<P><STRONG><a name="[51]"></a>BSP_InitSPI</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bsp.o(i.BSP_InitSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
</UL>

<P><STRONG><a name="[4d]"></a>BSP_InitUSART</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bsp.o(i.BSP_InitUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_InitUSART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[b6]"></a>CRC_CalcCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_CalcCRC))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[b7]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_GetCRC))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[b5]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_ResetDR))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[4b]"></a>DBGMCU_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(i.DBGMCU_Config))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mrfi.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = EXTI1_IRQHandler &rArr; MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg_ln
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
</UL>

<P><STRONG><a name="[59]"></a>MRFI_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MRFI_DelayMs &rArr; Mrfi_DelayUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTo
</UL>

<P><STRONG><a name="[5b]"></a>MRFI_EnableRxAddrFilter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_EnableRxAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_EnableRxAddrFilter &rArr; mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[a3]"></a>MRFI_GetRadioState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_GetRadioState))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[58]"></a>MRFI_GpioIsr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_GpioIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>MRFI_Init</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MRFI_Init &rArr; mrfiSpiInit &rArr; BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_CSN_IS_HIGH
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[d3]"></a>MRFI_PostKillSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_PostKillSem))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[82]"></a>MRFI_RandomByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_RandomByte))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
</UL>

<P><STRONG><a name="[6e]"></a>MRFI_Receive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MRFI_Receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[70]"></a>MRFI_ReplyDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_ReplyDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MRFI_ReplyDelay &rArr; Mrfi_DelayUsecSem
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[73]"></a>MRFI_Rssi</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_Rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MRFI_Rssi &rArr; mrfiSpiReadReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[84]"></a>MRFI_RxAddrIsFiltered</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, mrfi.o(i.MRFI_RxAddrIsFiltered))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MRFI_RxAddrIsFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[75]"></a>MRFI_RxCompleteISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nwk_frame.o(i.MRFI_RxCompleteISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[78]"></a>MRFI_RxIdle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_RxIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[79]"></a>MRFI_RxOn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_RxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MRFI_RxOn &rArr; Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[60]"></a>MRFI_SPI_CSN_IS_HIGH</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_SPI_CSN_IS_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[62]"></a>MRFI_SPI_DRIVE_CSN_HIGH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_SPI_DRIVE_CSN_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[61]"></a>MRFI_SPI_DRIVE_CSN_LOW</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_SPI_DRIVE_CSN_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[67]"></a>MRFI_SetLogicalChannel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetLogicalChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_SetLogicalChannel &rArr; mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[68]"></a>MRFI_SetRFPwr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetRFPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_SetRFPwr &rArr; mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[7b]"></a>MRFI_SetRxAddrFilter</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetRxAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_SetRxAddrFilter &rArr; mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[7c]"></a>MRFI_Sleep</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[7d]"></a>MRFI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, mrfi.o(i.MRFI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecLong
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PrepareToTx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
</UL>

<P><STRONG><a name="[80]"></a>MRFI_WakeUp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MRFI_WakeUp &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[7e]"></a>Mrfi_DelayUsecLong</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, mrfi.o(i.Mrfi_DelayUsecLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mrfi_DelayUsecLong
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[b2]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
</UL>

<P><STRONG><a name="[b4]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[52]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
</UL>

<P><STRONG><a name="[4c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[46]"></a>RCC_Configuration</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[85]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[8d]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[88]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[86]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[90]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[89]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8c]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8b]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[87]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[92]"></a>SMPL_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nwk_api.o(i.SMPL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SMPL_Init &rArr; nwk_join &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRxAddrFilter
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_EnableRxAddrFilter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>SMPL_Ioctl</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nwk_api.o(i.SMPL_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getFWVersion
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlPreInitAccessIsOK
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[9f]"></a>SMPL_Link</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(i.SMPL_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SMPL_Link &rArr; nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTo
</UL>

<P><STRONG><a name="[a1]"></a>SMPL_SendOpt</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, nwk_api.o(i.SMPL_SendOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildAckReqFrame
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTo
</UL>

<P><STRONG><a name="[54]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
</UL>

<P><STRONG><a name="[53]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
</UL>

<P><STRONG><a name="[91]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[49]"></a>Sys_delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.Sys_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[72]"></a>Sys_delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.Sys_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
</UL>

<P><STRONG><a name="[ae]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>

<P><STRONG><a name="[55]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
</UL>

<P><STRONG><a name="[af]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>

<P><STRONG><a name="[4a]"></a>__bsp_ASSERT</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, bsp.o(i.__bsp_ASSERT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg_ln
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_EnableRxAddrFilter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[ad]"></a>__bsp_debug</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.__bsp_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_dec
</UL>

<P><STRONG><a name="[ac]"></a>__bsp_debug_dec</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp.o(i.__bsp_debug_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __bsp_debug_dec &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>

<P><STRONG><a name="[ab]"></a>__bsp_debug_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.__bsp_debug_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg_ln
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>

<P><STRONG><a name="[57]"></a>__bsp_debug_msg_ln</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i.__bsp_debug_msg_ln))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>

<P><STRONG><a name="[6b]"></a>__mrfi_GDO0_INIT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mrfi.o(i.__mrfi_GDO0_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mrfi_GDO0_INIT &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[c4]"></a>__mrfi_SPI_IS_INITIALIZED</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_IS_INITIALIZED))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[c5]"></a>__mrfi_SPI_READ_BYTE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_READ_BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[65]"></a>__mrfi_SPI_WAIT_DONE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_WAIT_DONE))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[64]"></a>__mrfi_SPI_WRITE_BYTE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_WRITE_BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b3]"></a>createRandomAddress</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mrfi.o(i.createRandomAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = createRandomAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcCRC
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>gpioPinConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, bsp.o(i.gpioPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPort
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitLeds
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitButtons
</UL>

<P><STRONG><a name="[63]"></a>gpioPinIn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.gpioPinIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpioPinIn
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinMask
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[bb]"></a>gpioPinMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.gpioPinMask))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
</UL>

<P><STRONG><a name="[ba]"></a>gpioPort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.gpioPort))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>

<P><STRONG><a name="[c2]"></a>linkTo</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, main_manyeds_autoack.o(i.linkTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = linkTo &rArr; SMPL_Link &rArr; nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Link
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleLED
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main_manyeds_autoack.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; linkTo &rArr; SMPL_Link &rArr; nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleLED
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[69]"></a>mrfiSpiCmdStrobe</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiCmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_READ_BYTE
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_IS_INITIALIZED
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PrepareToTx
</UL>

<P><STRONG><a name="[5f]"></a>mrfiSpiInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mrfi.o(i.mrfiSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mrfiSpiInit &rArr; BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[66]"></a>mrfiSpiReadReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mrfiSpiReadReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[83]"></a>mrfiSpiReadRxFifo</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mrfiSpiReadRxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[5c]"></a>mrfiSpiWriteReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRxAddrFilter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_EnableRxAddrFilter
</UL>

<P><STRONG><a name="[6d]"></a>mrfiSpiWriteTxFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiWriteTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PrepareToTx
</UL>

<P><STRONG><a name="[c8]"></a>nwk_QInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nwk_qmgmt.o(i.nwk_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[ca]"></a>nwk_QadjustOrder</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nwk_qmgmt.o(i.nwk_QadjustOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[c9]"></a>nwk_QfindOldest</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, nwk_qmgmt.o(i.nwk_QfindOldest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[76]"></a>nwk_QfindSlot</STRONG> (Thumb, 148 bytes, Stack size 36 bytes, nwk_qmgmt.o(i.nwk_QfindSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>

<P><STRONG><a name="[cb]"></a>nwk_allocateLocalRxPort</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, nwk.o(i.nwk_allocateLocalRxPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[a6]"></a>nwk_buildAckReqFrame</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nwk_frame.o(i.nwk_buildAckReqFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nwk_buildAckReqFrame &rArr; nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[a5]"></a>nwk_buildFrame</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, nwk_frame.o(i.nwk_buildFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildAckReqFrame
</UL>

<P><STRONG><a name="[a4]"></a>nwk_checkConnInfo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nwk.o(i.nwk_checkConnInfo))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[98]"></a>nwk_connectionControl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_connectionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_connectionControl &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[99]"></a>nwk_deviceAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nwk_ioctl.o(i.nwk_deviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_deviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyAddress
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[ce]"></a>nwk_frameInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nwk_frame.o(i.nwk_frameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_frameInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[cc]"></a>nwk_freeConnection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(i.nwk_freeConnection))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
</UL>

<P><STRONG><a name="[df]"></a>nwk_freqInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_freq.o(i.nwk_freqInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[d6]"></a>nwk_getBCastAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getBCastAddress))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[a2]"></a>nwk_getConnInfo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nwk.o(i.nwk_getConnInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
</UL>

<P><STRONG><a name="[9d]"></a>nwk_getFWVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getFWVersion))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[94]"></a>nwk_getMyAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>

<P><STRONG><a name="[db]"></a>nwk_getMyRxType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_frame.o(i.nwk_getMyRxType))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[cf]"></a>nwk_getNextConnection</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nwk.o(i.nwk_getNextConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getNextConnection &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[d0]"></a>nwk_getNumObjectFromMsg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nwk.o(i.nwk_getNumObjectFromMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getNumObjectFromMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[9e]"></a>nwk_getProtocolVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getProtocolVersion))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[de]"></a>nwk_globalsInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_globalsInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[b9]"></a>nwk_isConnectionValid</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, nwk.o(i.nwk_isConnectionValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[d4]"></a>nwk_isLinkDuplicate</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nwk.o(i.nwk_isLinkDuplicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isLinkDuplicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[d5]"></a>nwk_isValidReply</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nwk.o(i.nwk_isValidReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[95]"></a>nwk_join</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, nwk_join.o(i.nwk_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nwk_join &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setAPAddress
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[da]"></a>nwk_joinInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nwk_join.o(i.nwk_joinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_joinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[a0]"></a>nwk_link</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, nwk_link.o(i.nwk_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nwk_link &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Link
</UL>

<P><STRONG><a name="[dc]"></a>nwk_linkInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nwk_link.o(i.nwk_linkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_linkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[dd]"></a>nwk_mgmtInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_mgmt.o(i.nwk_mgmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_mgmtInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[93]"></a>nwk_nwkInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, nwk.o(i.nwk_nwkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_nwkInit &rArr; nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_securityInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_globalsInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freqInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[e0]"></a>nwk_pingInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_ping.o(i.nwk_pingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[3d]"></a>nwk_processFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_freq.o(i.nwk_processFreq))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>nwk_processJoin</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nwk_join.o(i.nwk_processJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nwk_processJoin &rArr; nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>nwk_processLink</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nwk_link.o(i.nwk_processLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nwk_processLink &rArr; handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>nwk_processMgmt</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nwk_mgmt.o(i.nwk_processMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nwk_processMgmt &rArr; nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>nwk_processPing</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nwk_ping.o(i.nwk_processPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nwk_processPing &rArr; handlePingRequest &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePingRequest
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>nwk_processSecurity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_security.o(i.nwk_processSecurity))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>nwk_putNumObjectIntoMsg</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nwk.o(i.nwk_putNumObjectIntoMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_putNumObjectIntoMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[9c]"></a>nwk_radioControl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_radioControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nwk_radioControl &rArr; MRFI_Rssi &rArr; mrfiSpiReadReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[9b]"></a>nwk_rawReceive</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_rawReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[9a]"></a>nwk_rawSend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nwk_ioctl.o(i.nwk_rawSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[e3]"></a>nwk_retrieveFrame</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, nwk_frame.o(i.nwk_retrieveFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
</UL>

<P><STRONG><a name="[e1]"></a>nwk_securityInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_security.o(i.nwk_securityInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[d2]"></a>nwk_sendAckReply</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, nwk_frame.o(i.nwk_sendAckReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[a7]"></a>nwk_sendFrame</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk_frame.o(i.nwk_sendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
</UL>

<P><STRONG><a name="[d9]"></a>nwk_setAPAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_setAPAddress))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[d8]"></a>nwk_setLinkToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_link.o(i.nwk_setLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
</UL>

<P><STRONG><a name="[cd]"></a>nwk_setMyAddress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_setMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
</UL>

<P><STRONG><a name="[c3]"></a>toggleLED</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main_manyeds_autoack.o(i.toggleLED))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTo
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[38]"></a>sCB</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main_manyeds_autoack.o(i.sCB))
<BR>[Address Reference Count : 1]<UL><LI> main_manyeds_autoack.o(i.main)
</UL>
<P><STRONG><a name="[6c]"></a>MRFI_PrepareToTx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_PrepareToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[74]"></a>Mrfi_CalculateRssi</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mrfi.o(i.Mrfi_CalculateRssi))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[5a]"></a>Mrfi_DelayUsec</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_DelayUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mrfi_DelayUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>

<P><STRONG><a name="[71]"></a>Mrfi_DelayUsecSem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_DelayUsecSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mrfi_DelayUsecSem
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
</UL>

<P><STRONG><a name="[7f]"></a>Mrfi_RandomBackoffDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_RandomBackoffDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mrfi_RandomBackoffDelay &rArr; Mrfi_DelayUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[6a]"></a>Mrfi_RxModeOff</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mrfi.o(i.Mrfi_RxModeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[7a]"></a>Mrfi_RxModeOn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mrfi.o(i.Mrfi_RxModeOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>

<P><STRONG><a name="[5d]"></a>Mrfi_SyncPinRxIsr</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_SyncPinRxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxAddrIsFiltered
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>

<P><STRONG><a name="[37]"></a>mrfi_TxCCADone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.mrfi_TxCCADone))
<BR>[Address Reference Count : 1]<UL><LI> mrfi.o(i.MRFI_Transmit)
</UL>
<P><STRONG><a name="[36]"></a>mrfi_TxImmediateDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.mrfi_TxImmediateDone))
<BR>[Address Reference Count : 1]<UL><LI> mrfi.o(i.MRFI_Transmit)
</UL>
<P><STRONG><a name="[c7]"></a>spiBurstFifoAccess</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mrfi.o(i.spiBurstFifoAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_READ_BYTE
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_IS_INITIALIZED
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_CSN_IS_HIGH
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
</UL>

<P><STRONG><a name="[c6]"></a>spiRegAccess</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mrfi.o(i.spiRegAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_READ_BYTE
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_IS_INITIALIZED
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
</UL>

<P><STRONG><a name="[c0]"></a>initializeConnection</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nwk.o(i.initializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
</UL>

<P><STRONG><a name="[c1]"></a>map_lid2idx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nwk.o(i.map_lid2idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>

<P><STRONG><a name="[97]"></a>ioctlPreInitAccessIsOK</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_api.o(i.ioctlPreInitAccessIsOK))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[77]"></a>dispatchFrame</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nwk_frame.o(i.dispatchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[bc]"></a>handleLinkRequest</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nwk_link.o(i.handleLinkRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
</UL>

<P><STRONG><a name="[bd]"></a>smpl_send_link_reply</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, nwk_link.o(i.smpl_send_link_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[e2]"></a>smpl_send_mgmt_reply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_mgmt.o(i.smpl_send_mgmt_reply))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
</UL>

<P><STRONG><a name="[be]"></a>handlePingRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_ping.o(i.handlePingRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = handlePingRequest &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
</UL>

<P><STRONG><a name="[bf]"></a>smpl_send_ping_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk_ping.o(i.smpl_send_ping_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePingRequest
</UL>

<P><STRONG><a name="[a8]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a9]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
