<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\CC110L-Access Point\CC1101-AP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\CC110L-Access Point\CC1101-AP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Mon Aug 15 19:27:40 2016
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; vGprsConnectTask &rArr; Gprs_TcpConnect &rArr; Sim900aTcpConnect &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from mrfi.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4b]">Sim900aClose</a> from sim900a_gprs.o(i.Sim900aClose) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[4c]">Sim900aCmd</a> from sim900a_gprs.o(i.Sim900aCmd) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[4f]">Sim900aGetConnectStatus</a> from sim900a_gprs.o(i.Sim900aGetConnectStatus) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[50]">Sim900aGetSignal</a> from sim900a_gprs.o(i.Sim900aGetSignal) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[4d]">Sim900aGprsRead</a> from sim900a_gprs.o(i.Sim900aGprsRead) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[51]">Sim900aGprsRecv</a> from sim900a_gprs.o(i.Sim900aGprsRecv) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[4e]">Sim900aGprsWrite</a> from sim900a_gprs.o(i.Sim900aGprsWrite) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[49]">Sim900aInit</a> from sim900a_gprs.o(i.Sim900aInit) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[4a]">Sim900aOpen</a> from sim900a_gprs.o(i.Sim900aOpen) referenced from sim900a_gprs.o(i.Gprs_Init)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from bsp.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from gprs_serial.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from gprs_serial.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[54]">fputc</a> from bsp.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[46]">main</a> from ap_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[53]">mrfi_TxCCADone</a> from mrfi.o(i.mrfi_TxCCADone) referenced from mrfi.o(i.MRFI_Transmit)
 <LI><a href="#[52]">mrfi_TxImmediateDone</a> from mrfi.o(i.mrfi_TxImmediateDone) referenced from mrfi.o(i.MRFI_Transmit)
 <LI><a href="#[5a]">nwk_processFreq</a> from nwk_freq.o(i.nwk_processFreq) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[58]">nwk_processJoin</a> from nwk_join.o(i.nwk_processJoin) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[57]">nwk_processLink</a> from nwk_link.o(i.nwk_processLink) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[5b]">nwk_processMgmt</a> from nwk_mgmt.o(i.nwk_processMgmt) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[56]">nwk_processPing</a> from nwk_ping.o(i.nwk_processPing) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[59]">nwk_processSecurity</a> from nwk_security.o(i.nwk_processSecurity) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[55]">sCB</a> from main_ap_async_listen_autoack.o(i.sCB) referenced from main_ap_async_listen_autoack.o(i.mrif_config)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[61]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[162]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[163]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[164]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[165]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[166]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetedPar
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGprsRecv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGprsRead
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsReceiveTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGprsWrite
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[122]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findPeer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[16d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>BSP_Delay</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecLong
</UL>

<P><STRONG><a name="[62]"></a>BSP_INIT_SYS_TICKS</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bsp.o(i.BSP_INIT_SYS_TICKS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_INIT_SYS_TICKS &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[6b]"></a>BSP_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_Init &rArr; BSP_InitBoard &rArr; BSP_InitUSART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>BSP_InitBoard</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp.o(i.BSP_InitBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_InitBoard &rArr; BSP_InitUSART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[74]"></a>BSP_InitButtons</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bsp.o(i.BSP_InitButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_InitButtons &rArr; gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>

<P><STRONG><a name="[6e]"></a>BSP_InitDrivers</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bsp.o(i.BSP_InitDrivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_InitDrivers &rArr; BSP_InitLeds &rArr; gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitLeds
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[76]"></a>BSP_InitLeds</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, bsp.o(i.BSP_InitLeds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_InitLeds &rArr; gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>

<P><STRONG><a name="[77]"></a>BSP_InitSPI</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bsp.o(i.BSP_InitSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
</UL>

<P><STRONG><a name="[73]"></a>BSP_InitUSART</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bsp.o(i.BSP_InitUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_InitUSART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[c9]"></a>CRC16</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, encryption.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
</UL>

<P><STRONG><a name="[120]"></a>CRC_CalcCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_CalcCRC))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[121]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_GetCRC))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[11f]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_ResetDR))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
</UL>

<P><STRONG><a name="[7c]"></a>ConfigGPSDMARec</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, gprs_serial.o(i.ConfigGPSDMARec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConfigGPSDMARec &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
</UL>

<P><STRONG><a name="[71]"></a>DBGMCU_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(i.DBGMCU_Config))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[81]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
</UL>

<P><STRONG><a name="[7f]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
</UL>

<P><STRONG><a name="[114]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
</UL>

<P><STRONG><a name="[115]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mrfi.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EXTI0_IRQHandler &rArr; MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg_ln
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
</UL>

<P><STRONG><a name="[11c]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_IOConfig
</UL>

<P><STRONG><a name="[105]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aPowerOn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aClose
</UL>

<P><STRONG><a name="[106]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aPowerOn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aClose
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aReset
</UL>

<P><STRONG><a name="[107]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aPowerOn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aClose
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aReset
</UL>

<P><STRONG><a name="[85]"></a>GPRS_DMARecvHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gprs_serial.o(i.GPRS_DMARecvHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GPRS_DMARecvHandler &rArr; vGprsReceiveTask &rArr; Sim900aGprsRecv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsReceiveTask
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>GetGprsDev</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sim900a_gprs.o(i.GetGprsDev))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_GetConnectStatus
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsReceiveTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpConnect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpClose
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SimCardCheck
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Open
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aAck_ok
</UL>

<P><STRONG><a name="[87]"></a>GetSetedPar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, savepartoflash.o(i.GetSetedPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSetedPar &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
</UL>

<P><STRONG><a name="[89]"></a>GprsCmdWait</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sim900a_gprs.o(i.GprsCmdWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpShut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpClose
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aClose
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCREG
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aSendAck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCardCheck
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATtest
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATE
</UL>

<P><STRONG><a name="[8b]"></a>Gprs_GetConnectStatus</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sim900a_gprs.o(i.Gprs_GetConnectStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Gprs_GetConnectStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProMsg
</UL>

<P><STRONG><a name="[8c]"></a>Gprs_IOConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_IOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gprs_IOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
</UL>

<P><STRONG><a name="[8e]"></a>Gprs_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Gprs_Init &rArr; Gprs_SerInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_IOConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Gprs_Open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gprs_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
</UL>

<P><STRONG><a name="[8f]"></a>Gprs_SerInit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, gprs_serial.o(i.Gprs_SerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Gprs_SerInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
</UL>

<P><STRONG><a name="[96]"></a>Gprs_SimCardCheck</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_SimCardCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Gprs_SimCardCheck &rArr; Sim900aCardCheck &rArr; Sim900aATE &rArr; Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCardCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
</UL>

<P><STRONG><a name="[98]"></a>Gprs_TcpClose</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_TcpClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Gprs_TcpClose &rArr; Sim900aTcpClose &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpClose
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
</UL>

<P><STRONG><a name="[9a]"></a>Gprs_TcpConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_TcpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Gprs_TcpConfig &rArr; Sim900aTcpConfig &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
</UL>

<P><STRONG><a name="[9c]"></a>Gprs_TcpConnect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Gprs_TcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Gprs_TcpConnect &rArr; Sim900aTcpConnect &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
</UL>

<P><STRONG><a name="[9e]"></a>Gprs_Write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Gprs_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gprs_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProMsg
</UL>

<P><STRONG><a name="[9f]"></a>MRFI_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MRFI_DelayMs &rArr; Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[ed]"></a>MRFI_GetRadioState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_GetRadioState))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[84]"></a>MRFI_GpioIsr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_GpioIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>MRFI_Init</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MRFI_Init &rArr; mrfiSpiInit &rArr; BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_CSN_IS_HIGH
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[14c]"></a>MRFI_PostKillSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_PostKillSem))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[c5]"></a>MRFI_RandomByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_RandomByte))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
</UL>

<P><STRONG><a name="[b3]"></a>MRFI_Receive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MRFI_Receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[b4]"></a>MRFI_ReplyDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_ReplyDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MRFI_ReplyDelay &rArr; Mrfi_DelayUsecSem &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[b7]"></a>MRFI_Rssi</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_Rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MRFI_Rssi &rArr; mrfiSpiReadReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[c7]"></a>MRFI_RxAddrIsFiltered</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, mrfi.o(i.MRFI_RxAddrIsFiltered))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MRFI_RxAddrIsFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[b9]"></a>MRFI_RxCompleteISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nwk_frame.o(i.MRFI_RxCompleteISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[bc]"></a>MRFI_RxIdle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_RxIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
</UL>

<P><STRONG><a name="[bd]"></a>MRFI_RxOn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_RxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MRFI_RxOn &rArr; Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[a4]"></a>MRFI_SPI_CSN_IS_HIGH</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_SPI_CSN_IS_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[a6]"></a>MRFI_SPI_DRIVE_CSN_HIGH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_SPI_DRIVE_CSN_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[a5]"></a>MRFI_SPI_DRIVE_CSN_LOW</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mrfi.o(i.MRFI_SPI_DRIVE_CSN_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[ac]"></a>MRFI_SetLogicalChannel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetLogicalChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_SetLogicalChannel &rArr; mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[ad]"></a>MRFI_SetRFPwr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_SetRFPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_SetRFPwr &rArr; mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[bf]"></a>MRFI_Sleep</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[c0]"></a>MRFI_Transmit</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, mrfi.o(i.MRFI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PrepareToTx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecLong
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
</UL>

<P><STRONG><a name="[c3]"></a>MRFI_WakeUp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mrfi.o(i.MRFI_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MRFI_WakeUp &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[c1]"></a>Mrfi_DelayUsecLong</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, mrfi.o(i.Mrfi_DelayUsecLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mrfi_DelayUsecLong &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[c8]"></a>MsgPackage</STRONG> (Thumb, 228 bytes, Stack size 296 bytes, msg.o(i.MsgPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = MsgPackage &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
</UL>

<P><STRONG><a name="[63]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
</UL>

<P><STRONG><a name="[93]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
</UL>

<P><STRONG><a name="[129]"></a>PDInit_GetSysTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.PDInit_GetSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>

<P><STRONG><a name="[cc]"></a>ProMsg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ap_main.o(i.ProMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProMsg &rArr; Gprs_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_GetConnectStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
</UL>

<P><STRONG><a name="[64]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
</UL>

<P><STRONG><a name="[110]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[72]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_GDO0_INIT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_IOConfig
</UL>

<P><STRONG><a name="[10f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[6c]"></a>RCC_Configuration</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[cd]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[116]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d5]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d7]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d0]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ce]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d8]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d2]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d1]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d4]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d3]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[d6]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[cf]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[da]"></a>SMPL_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk_api.o(i.SMPL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SMPL_Init &rArr; MRFI_Init &rArr; mrfiSpiInit &rArr; BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrif_config
</UL>

<P><STRONG><a name="[dd]"></a>SMPL_Ioctl</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, nwk_api.o(i.SMPL_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinToken
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkToken
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getJoinToken
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getFWVersion
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlPreInitAccessIsOK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_NVObj
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrif_config
</UL>

<P><STRONG><a name="[ec]"></a>SMPL_LinkListen</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nwk_api.o(i.SMPL_LinkListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SMPL_LinkListen &rArr; MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
</UL>

<P><STRONG><a name="[f0]"></a>SMPL_Receive</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, nwk_api.o(i.SMPL_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
</UL>

<P><STRONG><a name="[f4]"></a>SMPL_SendOpt</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, nwk_api.o(i.SMPL_SendOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildAckReqFrame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
</UL>

<P><STRONG><a name="[79]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
</UL>

<P><STRONG><a name="[78]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
</UL>

<P><STRONG><a name="[102]"></a>Search_SubArray</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, commonuse.o(i.Search_SubArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Search_SubArray
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsReceiveTask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpShut
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpClose
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aIPStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGetSignal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aClose
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCREG
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCardCheck
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aAck_ok
</UL>

<P><STRONG><a name="[f9]"></a>Serial_PutData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gprs_serial.o(i.Serial_PutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Serial_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGprsWrite
</UL>

<P><STRONG><a name="[fc]"></a>Serial_PutString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gprs_serial.o(i.Serial_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Serial_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCmd
</UL>

<P><STRONG><a name="[103]"></a>Sim900aCREG</STRONG> (Thumb, 218 bytes, Stack size 152 bytes, sim900a_gprs.o(i.Sim900aCREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sim900aCREG &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerachKeyWord
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConfig
</UL>

<P><STRONG><a name="[4b]"></a>Sim900aClose</STRONG> (Thumb, 148 bytes, Stack size 144 bytes, sim900a_gprs.o(i.Sim900aClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sim900aClose &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[4c]"></a>Sim900aCmd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sim900aCmd &rArr; Serial_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[4f]"></a>Sim900aGetConnectStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sim900a_gprs.o(i.Sim900aGetConnectStatus))
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[50]"></a>Sim900aGetSignal</STRONG> (Thumb, 140 bytes, Stack size 152 bytes, sim900a_gprs.o(i.Sim900aGetSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Sim900aGetSignal &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerachKeyWord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[4d]"></a>Sim900aGprsRead</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aGprsRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sim900aGprsRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[51]"></a>Sim900aGprsRecv</STRONG> (Thumb, 188 bytes, Stack size 296 bytes, sim900a_gprs.o(i.Sim900aGprsRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Sim900aGprsRecv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsReceiveTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[4e]"></a>Sim900aGprsWrite</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, sim900a_gprs.o(i.Sim900aGprsWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sim900aGprsWrite &rArr; Serial_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[108]"></a>Sim900aIPStatus</STRONG> (Thumb, 262 bytes, Stack size 144 bytes, sim900a_gprs.o(i.Sim900aIPStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpShut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConfig
</UL>

<P><STRONG><a name="[49]"></a>Sim900aInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sim900a_gprs.o(i.Sim900aInit))
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[4a]"></a>Sim900aOpen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sim900aOpen &rArr; Sim900aATtest &rArr; Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aPowerOn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aReset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATtest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim900a_gprs.o(i.Gprs_Init)
</UL>
<P><STRONG><a name="[10b]"></a>Sim900aPowerOn</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Sim900aPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sim900aPowerOn &rArr; Sim900aReset &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aOpen
</UL>

<P><STRONG><a name="[99]"></a>Sim900aTcpClose</STRONG> (Thumb, 84 bytes, Stack size 144 bytes, sim900a_gprs.o(i.Sim900aTcpClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sim900aTcpClose &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpClose
</UL>

<P><STRONG><a name="[9b]"></a>Sim900aTcpConfig</STRONG> (Thumb, 396 bytes, Stack size 160 bytes, sim900a_gprs.o(i.Sim900aTcpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Sim900aTcpConfig &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aIPStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCREG
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aSendAck
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerachKeyWord
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpConfig
</UL>

<P><STRONG><a name="[9d]"></a>Sim900aTcpConnect</STRONG> (Thumb, 438 bytes, Stack size 208 bytes, sim900a_gprs.o(i.Sim900aTcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Sim900aTcpConnect &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetedPar
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpShut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aIPStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpClose
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpConnect
</UL>

<P><STRONG><a name="[109]"></a>Sim900aTcpShut</STRONG> (Thumb, 92 bytes, Stack size 144 bytes, sim900a_gprs.o(i.Sim900aTcpShut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aIPStatus
</UL>

<P><STRONG><a name="[d9]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6f]"></a>Sys_delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.Sys_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[b6]"></a>Sys_delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.Sys_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gprs_serial.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM4_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gprs_serial.o(i.TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
</UL>

<P><STRONG><a name="[91]"></a>TIM4_Set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gprs_serial.o(i.TIM4_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
</UL>

<P><STRONG><a name="[65]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[10d]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[66]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_InternalClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
</UL>

<P><STRONG><a name="[10e]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
</UL>

<P><STRONG><a name="[67]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_INIT_SYS_TICKS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, gprs_serial.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = USART3_IRQHandler &rArr; GPRS_DMARecvHandler &rArr; vGprsReceiveTask &rArr; Sim900aGprsRecv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DMARecvHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
</UL>

<P><STRONG><a name="[82]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPSDMARec
</UL>

<P><STRONG><a name="[94]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
</UL>

<P><STRONG><a name="[fb]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutData
</UL>

<P><STRONG><a name="[111]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
</UL>

<P><STRONG><a name="[7a]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SerInit
</UL>

<P><STRONG><a name="[113]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutData
</UL>

<P><STRONG><a name="[117]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16e]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[160]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsReceiveTask
</UL>

<P><STRONG><a name="[70]"></a>__bsp_ASSERT</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, bsp.o(i.__bsp_ASSERT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg_ln
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[11b]"></a>__bsp_debug</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.__bsp_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_dec
</UL>

<P><STRONG><a name="[11a]"></a>__bsp_debug_dec</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp.o(i.__bsp_debug_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __bsp_debug_dec &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>

<P><STRONG><a name="[119]"></a>__bsp_debug_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.__bsp_debug_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg_ln
</UL>

<P><STRONG><a name="[83]"></a>__bsp_debug_msg_ln</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i.__bsp_debug_msg_ln))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>__mrfi_GDO0_INIT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mrfi.o(i.__mrfi_GDO0_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mrfi_GDO0_INIT &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[137]"></a>__mrfi_SPI_IS_INITIALIZED</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_IS_INITIALIZED))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>

<P><STRONG><a name="[138]"></a>__mrfi_SPI_READ_BYTE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_READ_BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>

<P><STRONG><a name="[a9]"></a>__mrfi_SPI_WAIT_DONE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_WAIT_DONE))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[a8]"></a>__mrfi_SPI_WRITE_BYTE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mrfi.o(i.__mrfi_SPI_WRITE_BYTE))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[16f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[170]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[171]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11e]"></a>createRandomAddress</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mrfi.o(i.createRandomAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = createRandomAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrif_config
</UL>

<P><STRONG><a name="[54]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, bsp.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[75]"></a>gpioPinConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, bsp.o(i.gpioPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpioPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPort
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUSART
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitLeds
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitButtons
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[a7]"></a>gpioPinIn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.gpioPinIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpioPinIn
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPort
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[128]"></a>gpioPinMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.gpioPinMask))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
</UL>

<P><STRONG><a name="[127]"></a>gpioPort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.gpioPort))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinIn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
</UL>

<P><STRONG><a name="[126]"></a>isDupSandFFrame</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nwk_frame.o(i.isDupSandFFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = isDupSandFFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ap_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = main &rArr; vGprsConnectTask &rArr; Gprs_TcpConnect &rArr; Sim900aTcpConnect &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGprsConnectTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProMsg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrif_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ae]"></a>mrfiSpiCmdStrobe</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiCmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_READ_BYTE
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_IS_INITIALIZED
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PrepareToTx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[a3]"></a>mrfiSpiInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mrfi.o(i.mrfiSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mrfiSpiInit &rArr; BSP_InitSPI &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioPinConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitSPI
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[ab]"></a>mrfiSpiReadReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mrfiSpiReadReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[c6]"></a>mrfiSpiReadRxFifo</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mrfiSpiReadRxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[aa]"></a>mrfiSpiWriteReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mrfiSpiWriteReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[b2]"></a>mrfiSpiWriteTxFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mrfi.o(i.mrfiSpiWriteTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PrepareToTx
</UL>

<P><STRONG><a name="[135]"></a>mrfi_loop</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, main_ap_async_listen_autoack.o(i.mrfi_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mrfi_loop &rArr; MsgPackage &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDInit_GetSysTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleLED
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>mrif_config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main_ap_async_listen_autoack.o(i.mrif_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mrif_config &rArr; createRandomAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRandomAddress
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleLED
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>nwk_NVObj</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(i.nwk_NVObj))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[13c]"></a>nwk_QInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nwk_qmgmt.o(i.nwk_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[13e]"></a>nwk_QadjustOrder</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nwk_qmgmt.o(i.nwk_QadjustOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[13d]"></a>nwk_QfindOldest</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, nwk_qmgmt.o(i.nwk_QfindOldest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[ba]"></a>nwk_QfindSlot</STRONG> (Thumb, 148 bytes, Stack size 36 bytes, nwk_qmgmt.o(i.nwk_QfindSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[13f]"></a>nwk_SendEmptyPollRspFrame</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, nwk_frame.o(i.nwk_SendEmptyPollRspFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[140]"></a>nwk_allocateLocalRxPort</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, nwk.o(i.nwk_allocateLocalRxPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[f6]"></a>nwk_buildAckReqFrame</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nwk_frame.o(i.nwk_buildAckReqFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nwk_buildAckReqFrame &rArr; nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[f5]"></a>nwk_buildFrame</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, nwk_frame.o(i.nwk_buildFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildAckReqFrame
</UL>

<P><STRONG><a name="[15d]"></a>nwk_checkAppMsgTID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nwk.o(i.nwk_checkAppMsgTID))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[f2]"></a>nwk_checkConnInfo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nwk.o(i.nwk_checkConnInfo))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>

<P><STRONG><a name="[e4]"></a>nwk_connectionControl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_connectionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_connectionControl &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[e5]"></a>nwk_deviceAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nwk_ioctl.o(i.nwk_deviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_deviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyAddress
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[144]"></a>nwk_findAlreadyJoined</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk.o(i.nwk_findAlreadyJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_findAlreadyJoined &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[145]"></a>nwk_findPeer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nwk.o(i.nwk_findPeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_findPeer &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
</UL>

<P><STRONG><a name="[146]"></a>nwk_frameInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nwk_frame.o(i.nwk_frameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_frameInit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[141]"></a>nwk_freeConnection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(i.nwk_freeConnection))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
</UL>

<P><STRONG><a name="[156]"></a>nwk_freqInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_freq.o(i.nwk_freqInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[124]"></a>nwk_getBCastAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getBCastAddress))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[f1]"></a>nwk_getConnInfo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nwk.o(i.nwk_getConnInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
</UL>

<P><STRONG><a name="[ea]"></a>nwk_getFWVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getFWVersion))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[e2]"></a>nwk_getJoinToken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nwk_join.o(i.nwk_getJoinToken))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[e0]"></a>nwk_getLinkToken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nwk_link.o(i.nwk_getLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[ef]"></a>nwk_getLocalLinkID</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, nwk_link.o(i.nwk_getLocalLinkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nwk_getLocalLinkID
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[142]"></a>nwk_getMyAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
</UL>

<P><STRONG><a name="[15f]"></a>nwk_getMyRxType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_frame.o(i.nwk_getMyRxType))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[147]"></a>nwk_getNextConnection</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nwk.o(i.nwk_getNextConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getNextConnection &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[148]"></a>nwk_getNumObjectFromMsg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nwk.o(i.nwk_getNumObjectFromMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getNumObjectFromMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[eb]"></a>nwk_getProtocolVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_getProtocolVersion))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[133]"></a>nwk_getQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_qmgmt.o(i.nwk_getQ))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
</UL>

<P><STRONG><a name="[152]"></a>nwk_getSFInfoPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk.o(i.nwk_getSFInfoPtr))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[14a]"></a>nwk_getSandFFrame</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, nwk_frame.o(i.nwk_getSandFFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_getSandFFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[155]"></a>nwk_globalsInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_globalsInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[125]"></a>nwk_isConnectionValid</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, nwk.o(i.nwk_isConnectionValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[14d]"></a>nwk_isLinkDuplicate</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nwk.o(i.nwk_isLinkDuplicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isLinkDuplicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[f7]"></a>nwk_isSandFClient</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nwk_join.o(i.nwk_isSandFClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isSandFClient &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[14e]"></a>nwk_isValidReply</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nwk.o(i.nwk_isValidReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[dc]"></a>nwk_join</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_join.o(i.nwk_join))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[e9]"></a>nwk_joinContext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_ioctl.o(i.nwk_joinContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_joinContext
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinContext
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[150]"></a>nwk_joinInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nwk_join.o(i.nwk_joinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_joinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateLinkToken
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSFInfoPtr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[153]"></a>nwk_linkInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nwk_link.o(i.nwk_linkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_linkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[154]"></a>nwk_mgmtInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nwk_mgmt.o(i.nwk_mgmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_mgmtInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[db]"></a>nwk_nwkInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, nwk.o(i.nwk_nwkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_nwkInit &rArr; nwk_joinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_securityInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_globalsInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freqInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[157]"></a>nwk_pingInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_ping.o(i.nwk_pingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[5a]"></a>nwk_processFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_freq.o(i.nwk_processFreq))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>nwk_processJoin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nwk_join.o(i.nwk_processJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nwk_processJoin &rArr; handleJoinRequest &rArr; smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleJoinRequest
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>nwk_processLink</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nwk_link.o(i.nwk_processLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nwk_processLink &rArr; handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>nwk_processMgmt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nwk_mgmt.o(i.nwk_processMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nwk_processMgmt &rArr; smpl_send_mgmt_reply &rArr; send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>nwk_processPing</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nwk_ping.o(i.nwk_processPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nwk_processPing &rArr; handlePingRequest &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePingRequest
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>nwk_processSecurity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_security.o(i.nwk_processSecurity))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>nwk_putNumObjectIntoMsg</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nwk.o(i.nwk_putNumObjectIntoMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_putNumObjectIntoMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[e8]"></a>nwk_radioControl</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_radioControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nwk_radioControl &rArr; MRFI_Rssi &rArr; mrfiSpiReadReg &rArr; spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[e7]"></a>nwk_rawReceive</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nwk_ioctl.o(i.nwk_rawReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[e6]"></a>nwk_rawSend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nwk_ioctl.o(i.nwk_rawSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[123]"></a>nwk_replayFrame</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nwk_frame.o(i.nwk_replayFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nwk_replayFrame &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[15e]"></a>nwk_resetSFMarker</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_mgmt.o(i.nwk_resetSFMarker))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[f3]"></a>nwk_retrieveFrame</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, nwk_frame.o(i.nwk_retrieveFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
</UL>

<P><STRONG><a name="[15b]"></a>nwk_saveJoinedDevice</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nwk.o(i.nwk_saveJoinedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_saveJoinedDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[158]"></a>nwk_securityInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_security.o(i.nwk_securityInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[14b]"></a>nwk_sendAckReply</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, nwk_frame.o(i.nwk_sendAckReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[f8]"></a>nwk_sendFrame</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk_frame.o(i.nwk_sendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
</UL>

<P><STRONG><a name="[14f]"></a>nwk_setJoinContext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nwk_join.o(i.nwk_setJoinContext))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
</UL>

<P><STRONG><a name="[e1]"></a>nwk_setJoinToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_join.o(i.nwk_setJoinToken))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[df]"></a>nwk_setLinkToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_link.o(i.nwk_setLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[ee]"></a>nwk_setListenContext</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_link.o(i.nwk_setListenContext))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
</UL>

<P><STRONG><a name="[143]"></a>nwk_setMyAddress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_globals.o(i.nwk_setMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
</UL>

<P><STRONG><a name="[13b]"></a>toggleLED</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main_ap_async_listen_autoack.o(i.toggleLED))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrif_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_loop
</UL>

<P><STRONG><a name="[136]"></a>vGprsConnectTask</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, gprs_main.o(i.vGprsConnectTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = vGprsConnectTask &rArr; Gprs_TcpConnect &rArr; Sim900aTcpConnect &rArr; Sim900aIPStatus &rArr; Sim900aTcpShut &rArr; GprsCmdWait &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_GetConnectStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDInit_GetSysTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgPackage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpConnect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_TcpConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SimCardCheck
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>vGprsReceiveTask</STRONG> (Thumb, 296 bytes, Stack size 144 bytes, sim900a_gprs.o(i.vGprsReceiveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = vGprsReceiveTask &rArr; Sim900aGprsRecv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGprsRecv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DMARecvHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[55]"></a>sCB</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main_ap_async_listen_autoack.o(i.sCB))
<BR>[Address Reference Count : 1]<UL><LI> main_ap_async_listen_autoack.o(i.mrif_config)
</UL>
<P><STRONG><a name="[b1]"></a>MRFI_PrepareToTx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mrfi.o(i.MRFI_PrepareToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[b8]"></a>Mrfi_CalculateRssi</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mrfi.o(i.Mrfi_CalculateRssi))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
</UL>

<P><STRONG><a name="[a0]"></a>Mrfi_DelayUsec</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_DelayUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>

<P><STRONG><a name="[b5]"></a>Mrfi_DelayUsecSem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_DelayUsecSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mrfi_DelayUsecSem &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
</UL>

<P><STRONG><a name="[c2]"></a>Mrfi_RandomBackoffDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_RandomBackoffDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mrfi_RandomBackoffDelay &rArr; Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[af]"></a>Mrfi_RxModeOff</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mrfi.o(i.Mrfi_RxModeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[be]"></a>Mrfi_RxModeOn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mrfi.o(i.Mrfi_RxModeOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>

<P><STRONG><a name="[a1]"></a>Mrfi_SyncPinRxIsr</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, mrfi.o(i.Mrfi_SyncPinRxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxAddrIsFiltered
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>

<P><STRONG><a name="[53]"></a>mrfi_TxCCADone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.mrfi_TxCCADone))
<BR>[Address Reference Count : 1]<UL><LI> mrfi.o(i.MRFI_Transmit)
</UL>
<P><STRONG><a name="[52]"></a>mrfi_TxImmediateDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mrfi.o(i.mrfi_TxImmediateDone))
<BR>[Address Reference Count : 1]<UL><LI> mrfi.o(i.MRFI_Transmit)
</UL>
<P><STRONG><a name="[13a]"></a>spiBurstFifoAccess</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mrfi.o(i.spiBurstFifoAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_READ_BYTE
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_IS_INITIALIZED
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_CSN_IS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
</UL>

<P><STRONG><a name="[139]"></a>spiRegAccess</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mrfi.o(i.spiRegAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spiRegAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__bsp_ASSERT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WRITE_BYTE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_WAIT_DONE
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_READ_BYTE
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mrfi_SPI_IS_INITIALIZED
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_LOW
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SPI_DRIVE_CSN_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
</UL>

<P><STRONG><a name="[131]"></a>initializeConnection</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nwk.o(i.initializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
</UL>

<P><STRONG><a name="[132]"></a>map_lid2idx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nwk.o(i.map_lid2idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>

<P><STRONG><a name="[de]"></a>ioctlPreInitAccessIsOK</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_api.o(i.ioctlPreInitAccessIsOK))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[bb]"></a>dispatchFrame</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, nwk_frame.o(i.dispatchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_delay_ms
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[151]"></a>generateLinkToken</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_join.o(i.generateLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[12a]"></a>handleJoinRequest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nwk_join.o(i.handleJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = handleJoinRequest &rArr; smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[12b]"></a>smpl_send_join_reply</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, nwk_join.o(i.smpl_send_join_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_resetSFMarker
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkToken
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleJoinRequest
</UL>

<P><STRONG><a name="[12c]"></a>handleLinkRequest</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nwk_link.o(i.handleLinkRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
</UL>

<P><STRONG><a name="[12d]"></a>smpl_send_link_reply</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, nwk_link.o(i.smpl_send_link_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[12e]"></a>smpl_send_unlink_reply</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nwk_link.o(i.smpl_send_unlink_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpl_send_unlink_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findPeer
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[15c]"></a>send_poll_reply</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nwk_mgmt.o(i.send_poll_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkAppMsgTID
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[159]"></a>smpl_send_mgmt_reply</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_mgmt.o(i.smpl_send_mgmt_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smpl_send_mgmt_reply &rArr; send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
</UL>

<P><STRONG><a name="[12f]"></a>handlePingRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_ping.o(i.handlePingRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = handlePingRequest &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
</UL>

<P><STRONG><a name="[130]"></a>smpl_send_ping_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk_ping.o(i.smpl_send_ping_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; MRFI_PrepareToTx &rArr; mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess &rArr; __bsp_ASSERT &rArr; __bsp_debug_msg_ln &rArr; __bsp_debug_msg &rArr; __bsp_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePingRequest
</UL>

<P><STRONG><a name="[fd]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fe]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[104]"></a>SerachKeyWord</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sim900a_gprs.o(i.SerachKeyWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SerachKeyWord
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGetSignal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCREG
</UL>

<P><STRONG><a name="[ff]"></a>Sim900aATE</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sim900aATE &rArr; Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aAck_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCardCheck
</UL>

<P><STRONG><a name="[101]"></a>Sim900aATtest</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aATtest))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sim900aATtest &rArr; Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aAck_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aOpen
</UL>

<P><STRONG><a name="[100]"></a>Sim900aAck_ok</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aAck_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsDev
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aSendAck
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATtest
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATE
</UL>

<P><STRONG><a name="[97]"></a>Sim900aCardCheck</STRONG> (Thumb, 146 bytes, Stack size 144 bytes, sim900a_gprs.o(i.Sim900aCardCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Sim900aCardCheck &rArr; Sim900aATE &rArr; Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_SubArray
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATE
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_SimCardCheck
</UL>

<P><STRONG><a name="[10a]"></a>Sim900aReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sim900a_gprs.o(i.Sim900aReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sim900aReset &rArr; gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aPowerOn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aOpen
</UL>

<P><STRONG><a name="[10c]"></a>Sim900aSendAck</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sim900a_gprs.o(i.Sim900aSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sim900aSendAck &rArr; Sim900aAck_ok &rArr; Search_SubArray
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aAck_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConfig
</UL>

<P><STRONG><a name="[8a]"></a>gprs_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sim900a_gprs.o(i.gprs_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gprs_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDInit_GetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConnect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aTcpClose
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aPowerOn
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aIPStatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGprsWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aGetSignal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aClose
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdWait
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aCardCheck
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aAck_ok
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATtest
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim900aATE
</UL>

<P><STRONG><a name="[118]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
